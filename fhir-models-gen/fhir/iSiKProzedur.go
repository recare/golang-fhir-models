// Copyright 2019 - 2021 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ISiKProzedur is documented here https://gematik.de/fhir/ISiK/StructureDefinition/ISiKProzedur
type ISiKProzedur struct {
	Id                    string           `bson:"id" json:"id"`
	Meta                  *Meta            `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules         *string          `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language              *string          `bson:"language,omitempty" json:"language,omitempty"`
	Text                  *Narrative       `bson:"text,omitempty" json:"text,omitempty"`
	Extension             []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension     []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier            []Identifier     `bson:"identifier,omitempty" json:"identifier,omitempty"`
	InstantiatesCanonical []string         `bson:"instantiatesCanonical,omitempty" json:"instantiatesCanonical,omitempty"`
	InstantiatesUri       []string         `bson:"instantiatesUri,omitempty" json:"instantiatesUri,omitempty"`
	BasedOn               []Reference      `bson:"basedOn,omitempty" json:"basedOn,omitempty"`
	PartOf                []Reference      `bson:"partOf,omitempty" json:"partOf,omitempty"`
	Status                string           `bson:"status" json:"status"`
	StatusReason          *CodeableConcept `bson:"statusReason,omitempty" json:"statusReason,omitempty"`
	Category              *CodeableConcept `bson:"category,omitempty" json:"category,omitempty"`
}
type OtherISiKProzedur ISiKProzedur

// MarshalJSON marshals the given ISiKProzedur as JSON into a byte slice
func (r ISiKProzedur) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherISiKProzedur
		ResourceType string `json:"resourceType"`
	}{
		OtherISiKProzedur: OtherISiKProzedur(r),
		ResourceType:      "ISiKProzedur",
	})
}

// UnmarshalISiKProzedur unmarshals a ISiKProzedur.
func UnmarshalISiKProzedur(b []byte) (ISiKProzedur, error) {
	var iSiKProzedur ISiKProzedur
	if err := json.Unmarshal(b, &iSiKProzedur); err != nil {
		return iSiKProzedur, err
	}
	return iSiKProzedur, nil
}
