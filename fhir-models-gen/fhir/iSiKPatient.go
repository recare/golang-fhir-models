// Copyright 2019 - 2021 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ISiKPatient is documented here https://gematik.de/fhir/ISiK/StructureDefinition/ISiKPatient
type ISiKPatient struct {
	Id                string       `bson:"id" json:"id"`
	Meta              *Meta        `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules     *string      `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language          *string      `bson:"language,omitempty" json:"language,omitempty"`
	Text              *Narrative   `bson:"text,omitempty" json:"text,omitempty"`
	Extension         []Extension  `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension  `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier        []Identifier `bson:"identifier" json:"identifier"`
}
type OtherISiKPatient ISiKPatient

// MarshalJSON marshals the given ISiKPatient as JSON into a byte slice
func (r ISiKPatient) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherISiKPatient
		ResourceType string `json:"resourceType"`
	}{
		OtherISiKPatient: OtherISiKPatient(r),
		ResourceType:     "ISiKPatient",
	})
}

// UnmarshalISiKPatient unmarshals a ISiKPatient.
func UnmarshalISiKPatient(b []byte) (ISiKPatient, error) {
	var iSiKPatient ISiKPatient
	if err := json.Unmarshal(b, &iSiKPatient); err != nil {
		return iSiKPatient, err
	}
	return iSiKPatient, nil
}
