// Copyright 2019 - 2021 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// ISiKBerichtBundle is documented here https://gematik.de/fhir/ISiK/StructureDefinition/ISiKBerichtBundle
type ISiKBerichtBundle struct {
	Id            *string                  `bson:"id,omitempty" json:"id,omitempty"`
	Meta          *Meta                    `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules *string                  `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language      *string                  `bson:"language,omitempty" json:"language,omitempty"`
	Identifier    *Identifier              `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Type          string                   `bson:"type" json:"type"`
	Timestamp     string                   `bson:"timestamp" json:"timestamp"`
	Total         *int                     `bson:"total,omitempty" json:"total,omitempty"`
	Link          []ISiKBerichtBundleLink  `bson:"link,omitempty" json:"link,omitempty"`
	Entry         []ISiKBerichtBundleEntry `bson:"entry" json:"entry"`
	Signature     *Signature               `bson:"signature,omitempty" json:"signature,omitempty"`
}
type ISiKBerichtBundleLink struct {
	Id                *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Relation          string      `bson:"relation" json:"relation"`
	Url               string      `bson:"url" json:"url"`
}
type ISiKBerichtBundleEntry struct {
	Id                *string                         `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension                     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension                     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Link              []BundleLink                    `bson:"link,omitempty" json:"link,omitempty"`
	FullUrl           *string                         `bson:"fullUrl,omitempty" json:"fullUrl,omitempty"`
	Resource          json.RawMessage                 `bson:"resource,omitempty" json:"resource,omitempty"`
	Search            *ISiKBerichtBundleEntrySearch   `bson:"search,omitempty" json:"search,omitempty"`
	Request           *ISiKBerichtBundleEntryRequest  `bson:"request,omitempty" json:"request,omitempty"`
	Response          *ISiKBerichtBundleEntryResponse `bson:"response,omitempty" json:"response,omitempty"`
}
type ISiKBerichtBundleEntrySearch struct {
	Id                *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Mode              *string     `bson:"mode,omitempty" json:"mode,omitempty"`
	Score             *string     `bson:"score,omitempty" json:"score,omitempty"`
}
type ISiKBerichtBundleEntryRequest struct {
	Id                *string     `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Method            string      `bson:"method" json:"method"`
	Url               string      `bson:"url" json:"url"`
	IfNoneMatch       *string     `bson:"ifNoneMatch,omitempty" json:"ifNoneMatch,omitempty"`
	IfModifiedSince   *string     `bson:"ifModifiedSince,omitempty" json:"ifModifiedSince,omitempty"`
	IfMatch           *string     `bson:"ifMatch,omitempty" json:"ifMatch,omitempty"`
	IfNoneExist       *string     `bson:"ifNoneExist,omitempty" json:"ifNoneExist,omitempty"`
}
type ISiKBerichtBundleEntryResponse struct {
	Id                *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Status            string          `bson:"status" json:"status"`
	Location          *string         `bson:"location,omitempty" json:"location,omitempty"`
	Etag              *string         `bson:"etag,omitempty" json:"etag,omitempty"`
	LastModified      *string         `bson:"lastModified,omitempty" json:"lastModified,omitempty"`
	Outcome           json.RawMessage `bson:"outcome,omitempty" json:"outcome,omitempty"`
}


type OtherISiKBerichtBundle ISiKBerichtBundle

// MarshalJSON marshals the given ISiKBerichtBundle as JSON into a byte slice
func (r ISiKBerichtBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherISiKBerichtBundle
		ResourceType string `json:"resourceType"`
	}{
		OtherISiKBerichtBundle: OtherISiKBerichtBundle(r),
		ResourceType:           "ISiKBerichtBundle",
	})
}

// UnmarshalISiKBerichtBundle unmarshals a ISiKBerichtBundle.
func UnmarshalISiKBerichtBundle(b []byte) (ISiKBerichtBundle, error) {
	var iSiKBerichtBundle ISiKBerichtBundle
	if err := json.Unmarshal(b, &iSiKBerichtBundle); err != nil {
		return iSiKBerichtBundle, err
	}
	return iSiKBerichtBundle, nil
}
